<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var caramel;
var constant = require("rxt").constants;
var PAGING = constant.DEFAULT_ASSET_PAGIN;
require('/modules/publisher.js').exec(function(ctx) {
    caramel = require('caramel');
    var ui = require('rxt').ui;
    var reqUtil = require('utils').request;
    var asset = require('rxt').asset;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    //fixing STORE-818
    ctx.response.addHeader('Pragma' ,'no-cache');
    ctx.response.addHeader('Expires' ,'-1');
    // var options = uriMatcher.match('/{context}/assets/{type}/{pageName}');
    var options = {};
    //var q = ctx.request.getParameter('query');
    //var sortBy = ctx.request.getParameter('sortby');
    //var sort = ctx.request.getParameter('sort');
    var category = ctx.request.getParameter('category');
    var type = options.type;
    var assetApi = require('/modules/asset-api.js').api;
    var app = require('rxt').app;
    var appManager = app.createUserAppManager(session);
    // var am = asset.createUserAssetManager(ctx.session, type);
    var page = ui.buildPage(ctx.session, ctx.request);
    var assets;
    //Do an advanced search
    assets  = assetApi.genericAdvanceSearch(options,ctx.request,ctx.response,ctx.session)||[];

    var server = require('store').server;
    var user = server.current(ctx.session);
    var tenantId = user.tenantId;

    var rxtAPI = require('rxt');
    var permissionAPI = rxtAPI.permissions;
    var rxtManager = rxtAPI.core.rxtManager(tenantId);
    var assetList = [];
    var activatedAssets = rxtAPI.app.getUIActivatedAssets(tenantId);

    	for(var index = 0; index < activatedAssets.length; index++){
    		var haveListPermission = permissionAPI.hasAssetPermission(permissionAPI.ASSET_LIST, activatedAssets[index], ctx.session);
    		if(haveListPermission){
    			entry = {};
    			entry.type = activatedAssets[index];
    			entry.details = rxtManager.listRxtTypeDetails(entry.type);
    			entry.icon = entry.details.ui.icon || DEFAULT_ICON;
    			log.info(entry.details);
    			assetList.push(entry);
    		}
    	}

    var assetTypes = [];
    var assetType;
    for (var index in assetList) {
        assetType = assetList[index];
        assetTypes.push({
                url: '/assets/'+ assetType.type +'/list',
        		assetIcon: assetType.icon,
                assetTitle: assetType.details.pluralLabel
        });
    }

    page.ribbon = {};
    page.ribbon.breadcrumb = assetTypes;
    // var output = am.render(assets, page)._custom();
    var output = appManager.render(assets, page);
    // var output = appManager.render([], page);
    caramel.render(output);
}, request, response, session); %>