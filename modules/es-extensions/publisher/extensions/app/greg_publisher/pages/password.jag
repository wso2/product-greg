<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var caramel;
require('/modules/publisher.js').exec(function (ctx) {
    var log = new Log('/extensions/app/greg_publisher/pages/password.jag');
    var req = require('utils').request;
    caramel = require('caramel');
    var asset = require('rxt').asset;
    var gregAPI = require('/modules/greg-publisher-api.js').gregAPI;

    var ui = require('rxt').ui;
    var page = ui.buildPage(ctx.session, ctx.request);
    var options = req.getQueryOptions(ctx.request.getQueryString());

    if (!options.type) {
        ctx.response.sendError(404, 'Unable to locate the asset without a valid Type');
        return;
    }
    var am = asset.createUserAssetManager(ctx.session, options.type);
    var output = am.render(page)._custom();

    var key = req.getParameter('key');
    var value = req.getParameter('value');
    var result;
    try {
        // Retreive set of key values for the passwords.
        var properties = gregAPI.password.addNewPassword(ctx.session, options.type, key, value);
        // Convert Java object to JSON.
        var Gson = Packages.com.google.gson.Gson;
        var gson = new Gson();
        var result = gson.toJson(properties);
        result = parse(String(result));
    } catch (e) {
        log.error(e);
    }

    // Variable used to set the caramel renderer.
    var passwordArray = [];
    for (var key in result) {
        var pairs = {};
        if ((key.indexOf("registry.") < 0)) {
            pairs.key = key;
            passwordArray.push(pairs);
        }
    }
    output.passwords = passwordArray;
    caramel.render(output);
}, request, response, session); %>