<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var caramel;
require('/modules/store.js').exec(function(ctx) {
    caramel = require('caramel');
    var rxt = require('rxt');
    var process = require('process');
    var ratingApi = require('/modules/rating-api.js').api;
    var tenantApi = require('/modules/tenant-api.js').api;
    var gregAPI = require('/modules/greg-publisher-api.js').gregAPI;
    var asset = rxt.asset;
    var ui = rxt.ui;
    var core = rxt.core;
    var user = ctx.user;
    var constants = rxt.constants;
    var log = ctx.log;
    var pageEndpoint = constants.ASSET_DETAIL_URL_PATTERN;
    var guestDomain = process.getProperty('server.host') + ':' + process.getProperty('https.port');
    //'/{context}/assets/{type}/{pageName}/{+id}';
    var tenantedPageEndpoint = constants.ASSET_DETAIL_TENANT_URL_PATTERN;
    //'/{context}/t/{domain}/assets/{type}/{pageName}/{+id}';
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match(pageEndpoint) || uriMatcher.match(tenantedPageEndpoint);
    if (!options) {
        response.sendError(400, 'Could not locate an endpoint for your request.Make sure that you provide an id');
    } else if (!options.id) {
        response.sendError(400, 'An id must be provided when viewing details of a particular asset');
    } else {
        var type = options.type;
        var am;
        var username;
        var carbon = require('carbon');
        var context;
	    var instance;
        var tenantResources = tenantApi.createTenantAwareAssetResources(ctx.session, options);
        //Support for cross tenant views
        context = tenantResources.context;
        am = tenantResources.am;
        var tenantDetails = tenantApi.createTenantDetails(ctx.request, ctx.session);
        var tenantId = tenantDetails.tenantId;
        var page = ui.buildPage(ctx.session, ctx.request, tenantId);
        var assets = null;
        //The asset retrieval may fail when attempting to obtain an asset which is not accessible
        try {
            assets = am.get(options.id);
            if (assets == null) {
                response.sendError(404, 'The asset with id: ' + options.id + ' could not be located.');
            } else {
                var assetsArray = [];
                assetsArray.push(assets);
                ratingApi.addRatings(assetsArray, am, context.tenantId, context.username);
                //Cross tenant view could be anonymous
                if (!context.isAnonContext) {
                    assets.isSubscribed = am.isSubscribed(options.id, ctx.session);
                }
                var output = am.renderBasic(assets, page).details();

                // Get all associations for the asset.
	            instance = am.get(options.id);
                output.associationsTypes = gregAPI.associations.listTypes(options.type);
                var associations = gregAPI.associations.list(ctx.session, options.type, instance.path);
                output.assets.allAssociationsExists = associations.results.length > 0;
                output.assets.allAssociations = associations.results;
                
                output.guestDomain = guestDomain;
                caramel.render(output);
            }
        } catch (e) {
            log.error('Unable to retrieve asset with id: ' + options.id + ' due to ', e);
            if ((e.hasOwnProperty('javaException')) && (e.javaException.getMessage().startsWith("Error in retrieving governance artifact by path"))) {
                response.sendError(404, 'The asset with id: ' + options.id + ' could not be located.');
                return;
            }
            response.sendError(500, 'Unable to obtain asset details');
        }
    }
}, request, response, session); %>